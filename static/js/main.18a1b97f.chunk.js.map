{"version":3,"sources":["contexts/ThemeContext.js","contexts/AuthContext.js","components/Navbar.js","contexts/BookContext.js","components/AddNewBook.js","components/BookList.js","components/ToggleButton.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeContextProvider","props","toggleTheme","setState","isLightTheme","state","dark","syntax","ui","bg","light","Provider","value","this","children","Component","AuthContext","AuthContextProvider","toggleAuth","isAuthenticated","Navbar","useContext","theme","style","background","color","onClick","BookContext","BookContextProvider","useState","title","id","books","setbooks","addBook","uuidv4","AddNewBook","setTitle","display","margin","onSubmit","e","preventDefault","htmlFor","marginRight","type","border","outline","borderRadius","padding","onChange","target","BookList","className","map","book","key","ToggleButton","count","setCount","useEffect","document","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.18a1b97f.chunk.js","sourcesContent":["import React, {createContext, Component } from 'react';\r\n\r\nexport const ThemeContext = createContext()\r\n\r\nclass ThemeContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      isLightTheme: true,\r\n      dark: {syntax: '#ddd', ui: '#333', bg: '#555' }, \r\n      light: {syntax: '#555', ui: '#ddd', bg: '#eee' },\r\n     }\r\n  }\r\n\r\n  toggleTheme = () =>{\r\n    this.setState({\r\n      isLightTheme: ! this.state.isLightTheme\r\n    })\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <ThemeContext.Provider value = {{...this.state, toggleTheme: this.toggleTheme }}>\r\n       {this.props.children}\r\n      </ThemeContext.Provider>\r\n     );\r\n  }\r\n}\r\n \r\nexport default ThemeContextProvider;","import React, {createContext, Component } from 'react';\r\n\r\nexport const AuthContext = createContext()\r\n\r\nclass AuthContextProvider extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      isAuthenticated: true,\r\n     }\r\n  }\r\n\r\n  toggleAuth = () =>{\r\n    this.setState({\r\n      isAuthenticated: ! this.state.isAuthenticated\r\n    })\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <AuthContext.Provider value = {{...this.state, toggleAuth: this.toggleAuth }}>\r\n           {this.props.children}\r\n      </AuthContext.Provider>\r\n     );\r\n  }\r\n}\r\n \r\nexport default AuthContextProvider;","import React, { useContext } from 'react'\r\nimport { ThemeContext } from '../contexts/ThemeContext'\r\nimport { AuthContext } from '../contexts/AuthContext'\r\n\r\n\r\nconst Navbar = () => {\r\n\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext)\r\n  const { isAuthenticated, toggleAuth } = useContext(AuthContext)\r\n  const theme = isLightTheme ? light : dark\r\n\r\n  return (\r\n    <nav style={{ background: theme.ui, color: theme.syntax }}>\r\n      <h1>Context App</h1>\r\n      <div onClick={toggleAuth}>\r\n        {isAuthenticated ? 'Logged In' : 'Logged Out'}\r\n      </div>\r\n      <ul>\r\n        <li>Home</li>\r\n        <li>Contact</li>\r\n        <li>About</li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React, { createContext, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props) => {\r\n  const [books, setbooks] = useState([\r\n    { title: 'name of the wind', id: 1 },\r\n    { title: 'the way of kings', id: 2 },\r\n    { title: 'the final empire', id: 3 },\r\n    { title: 'the hero of ages', id: 4 },\r\n  ])\r\n\r\nconst addBook = (title) => {\r\n    setbooks([...books, { title, id: uuidv4() }])\r\n  }\r\n\r\n  return (\r\n    <BookContext.Provider value={{ books, addBook: addBook }}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  );\r\n}\r\n\r\nexport default BookContextProvider;","import React, { useState, useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport { ThemeContext } from '../contexts/ThemeContext';\r\n\r\nconst AddNewBook = (props) => {\r\n  const [title, setTitle] = useState('')\r\n  \r\n  const { isLightTheme, dark, light } = useContext(ThemeContext)\r\n  const theme = isLightTheme ? light : dark\r\n\r\n  const { addBook } = useContext(BookContext)\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    addBook(title)\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form style={{ display: 'inline-block', margin: '0 auto', }} onSubmit={handleSubmit} >\r\n        <label \r\n          htmlFor=\"title\" \r\n          style={{ marginRight: '2rem' }}> New Book</label>\r\n        <input \r\n          type=\"text\" \r\n          id='title' \r\n          style={{ border: `1px solid ${theme.syntax}`, outline: 'none', borderRadius: '10px', padding: '10px', background:theme.ui, color: theme.syntax }}\r\n          onChange={(e) => { setTitle(e.target.value) }} \r\n          value={title} />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddNewBook;","import React, {useContext} from 'react'\r\nimport AddNewBook from './AddNewBook'\r\nimport { ThemeContext}  from '../contexts/ThemeContext'\r\nimport { BookContext } from '../contexts/BookContext'\r\n\r\nconst BookList = () => {\r\n  const { isLightTheme, dark, light } = useContext(ThemeContext)\r\n  const theme = isLightTheme ? light : dark\r\n  const { books }   = useContext(BookContext)\r\n\r\n  return (\r\n  <div className=\"book-list\" style = {{color: theme.syntax, background: theme.bg}} >\r\n      <ul>\r\n      { books.map(book => \r\n        <li style = {{background : theme.ui}} key = {book.id}> {book.title} </li>\r\n      )}\r\n      </ul>\r\n      <AddNewBook />\r\n    </div>\r\n    );\r\n}\r\n \r\nexport default BookList;","import React, { useContext, useState, useEffect } from 'react'\r\nimport { ThemeContext } from '../contexts/ThemeContext'\r\n\r\n\r\nconst ToggleButton = () => {\r\n  const { toggleTheme } = useContext(ThemeContext)\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect(() => {\r\n    document.title = `You clicked ${count} times`\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <p>You clicked {count} times</p>\r\n      <button onClick={() => { setCount(count + 1) }}>Increment the number</button>\r\n      <button onClick={() => { setCount(count - 1) }}>Decrement the number</button>\r\n      <button onClick={toggleTheme}>Toggle</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToggleButton;\r\n\r\n","import React from 'react';\nimport Navbar from './components/Navbar'\nimport BookList from './components/BookList'\nimport ThemeContextProvider from './contexts/ThemeContext';\nimport AuthContextProvider from './contexts/AuthContext'\nimport ToggleButton from './components/ToggleButton'\nimport BookContextProvider from './contexts/BookContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AuthContextProvider>\n        <ThemeContextProvider>\n          <Navbar />\n         \n          <BookContextProvider>\n            <BookList />\n          </BookContextProvider>\n\n          <ToggleButton />\n        </ThemeContextProvider>\n      </AuthContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}